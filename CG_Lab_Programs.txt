1. Program to implement Mid Point Line Algorithm. The line coordinates should be specified by the user.

#include <GL/glut.h>
#include <stdio.h>

int x00,y00,x01,y01;

void init()
{
  glClearColor(1,1,1,1);
  glClear(GL_COLOR_BUFFER_BIT);
  glMatrixMode(GL_PROJECTION);
  gluOrtho2D(-500,500,-500,500);
}

void writepixel(int x,int y)
{
   glPointSize(5);
  glBegin(GL_POINTS);       //WRITE PIXEL
  glColor3f(0,0,0);
  glVertex2f(x,y);
  glEnd();
  glFlush();
}
void display()
{
 
  int i,j;

  float dx=x01-x00 , dy = y01-y00; 
  float d = 2*dy-dx;

  float incrE = dy;
  float incrNE = dy - dx;
  
  int x=x00,y=y00;
     
  writepixel(x,y);

    while(x<x01)
   {
    if(d<=0)
      {
 		  d=d+2*incrE;
          x=x+1;
       }
   	  else
	   {
 		  d=d+2*incrNE;
          x=x+1;
          y=y+1;
 	   }
  writepixel(x,y);
  } 
}

int main(int argc,char *argv[])
{
  
  printf("Enter the values \n");
  printf("x0="); scanf("%d",&x00);
  printf("y0="); scanf("%d",&y00);
  printf("x1="); scanf("%d",&x01);
  printf("y1="); scanf("%d",&y01);
  
  glutInit(&argc,argv);
  glutInitWindowSize(500,500);
  glutCreateWindow("MIDPOINT LINE ALGORITHM");
  init();
  glutDisplayFunc(display);
  glutMainLoop();
  return 0;
}

---------------------------------------------------

2. Program to implement Mid Point Circle Algorithm. The radius should be specified by the user.

#include <GL/glut.h>
#include <stdio.h>
float x ;
float y ;
float r;
void init()
{
  glClearColor(0.0,0.0,0.0,0.0);
  glClear(GL_COLOR_BUFFER_BIT);
  glMatrixMode(GL_PROJECTION);
  gluOrtho2D(-900,900,-900,900);
}

void writepixel(float x,float y)
{
glPointSize(5);
glBegin(GL_POINTS);
glColor3f(1.0,0.0,0.0);
glVertex2f(x,y);
glEnd();
glFlush();
}
void midpointcircle( )
{
x=0;
y=r;
double d=5.0/4.0-r;
writepixel(x,y);
while(y>x)
{
   if(d<0)
     d=d+2.0*x+3.0;
  else
   {
     d=d+2.0*(x-y)+5.0;
     y--;
   }
  x++;
  writepixel(x,y);
  writepixel(y,x);
  writepixel(y,-x);
  writepixel(x,-y);
  writepixel(-x,-y);
  writepixel(-y,-x);
  writepixel(-y,x);
  writepixel(-x,y);
  glFlush();
 }
}

int main(int argc,char *argv[])
{ 
  printf("Enter the radius of the circle\n");
  scanf("%f",&r);
 
  glutInit(&argc,argv);
  glutInitWindowSize(500,500);
  glutCreateWindow("Midpoint Circle Algorithm");
  init();
  glutDisplayFunc(midpointcircle);
  glutMainLoop();
  return 0;
}

--------------------------

3. Program to implement Liang-Barsky line clipping algorithm. Make provision to specify the input line, window for clipping and viewport for displaying the clipped image.

#include<stdio.h>
#include<stdlib.h>
#include<GL/glut.h>
#include<math.h>

int X0,Y0,X1,Y1,xmin,ymin,xmax,ymax;
void init();
void display();
void draw_line(int type);
void draw_boundry(int type);
double maximum(double p[], double q[]);
double minimum(double p[], double q[]);
void liang();

int main(int argc, char ** argv[])
{
     printf("enter window coordinates:");
    printf("\n xmin:");
    scanf("%d",&xmin);

    printf("ymin:");
    scanf("%d",&ymin);

    printf("xmax:");
    scanf("%d",&xmax);

    printf("ymax:");
    scanf("%d",&ymax);

    /*printf("\nEnter viewport coordinates:");
    printf("\n xvmin:");
    scanf("%d",&xvmin);

    printf("yvmin:");
    scanf("%d",&yvmin);

     printf("xvmax:");
    scanf("%d",&xvmax);

     printf("yvmax:");
    scanf("%d",&yvmax);*/


    printf("\n enter the line coordinates:");
    printf("\nx0:");
    scanf("%d",&X0);

    printf("y0:");
    scanf("%d",&Y0);

     printf("x1:");
    scanf("%d",&X1);

     printf("y1:");
    scanf("%d",&Y1);

    glutInit(&argc, argv);
    glutInitWindowSize(1000,1000);
    glutCreateWindow("LIANG BARSKY");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
void init()
{
    glClearColor(1,1,1,1);
    glClear(GL_COLOR_BUFFER_BIT);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0,1000,0,1000);

}
void display()
{ glClear(GL_COLOR_BUFFER_BIT);
   draw_boundry(0);
   draw_line(0);
   liang();
   glFlush();
}
void draw_boundry(int type)
{    glColor3f(0,0,1);
    if(type==0)
    {
    glBegin(GL_LINE_LOOP);
    glVertex2f(xmin,ymin);
    glVertex2f(xmax,ymin);
    glVertex2f(xmax,ymax);
    glVertex2f(xmin,ymax);
    glEnd();
    }
    else{
       glBegin(GL_LINE_LOOP);
    glVertex2f(xmin*4,ymin*4);
    glVertex2f(xmax*4,ymin*4);
    glVertex2f(xmax*4,ymax*4);
    glVertex2f(xmin*4,ymax*4);
    glEnd();


    }
    /*else{
            glBegin(GL_LINE_LOOP);
       glVertex2f(xmin+l,ymin+l);
       glVertex2f(xmin+l,ymax+l);
       glVertex2f(xmax+l,ymax+l);
        glVertex2f(xmax+l,ymin+l);
        glEnd();



        }*/
        /*else{glBegin(GL_LINE_LOOP);
       glVertex2f(xvmin,yvmin);
       glVertex2f(xvmin,yvmax);
       glVertex2f(xvmax,yvmax);
        glVertex2f(xvmax,yvmin);
        glEnd();
        }*/

}
void draw_line(int type)
{
   glColor3f(1,0,0);
   if(type==0)
   {
       glBegin(GL_LINES);
       glVertex2f(X0,Y0);
       glVertex2f(X1,Y1);
       glEnd();
   }

   else{
        glBegin(GL_LINES);
       glVertex2f(X0*4,Y0*4);
       glVertex2f(X1*4,Y1*4);
       glEnd();



   }
  /* else{
            glBegin(GL_LINES);
       glVertex2f(l+X0,l+Y0);
       glVertex2f(l+X1,l+Y1);
        glEnd();


    }*/
   /* else{
        glBegin(GL_LINES);
       glVertex2f((xvmin-xmin)+X0,(yvmin-ymin)+Y0);
       glVertex2f((xvmin-xmin)+X1,(yvmin-ymin)+Y1);
        glEnd();



    }*/
}
   double maximum(double p[],double r[])
   {
       double max=0;
       int i;
       for(i=0;i<4;i++)
       {
           if(p[i]<0 && r[i]>max)
            max=r[i];

       }
       return max;
   }
      double minimum(double p[],double r[])
   {
       double min=1;
       int i;
       for(i=0;i<4;i++)
       {
           if(p[i]>0 && r[i]<min)
            min=r[i];

       }
       return min;
   }
   void liang()
   {
       double dx,dy,p[4],q[4],r[4],t1,t2;
       int i,reject=0;
       dx=X1-X0;
       dy=Y1-Y0;

       p[0]=-dx;
       p[1]=dx;
       p[2]=-dy;
       p[3]=dy;
       q[0]=X0-xmin;
       q[1]=xmax-X0;
       q[2]=Y0-ymin;
       q[3]=ymax-Y0;
       for(i=0;i<4;i++){
       if(p[i]==0 && q[i]<0){
            reject=1;
            break;
       }
       else{

        r[i]=q[i]/p[i];
       }
       }
       t1=maximum(p,r);
       t2=minimum(p,r);
       draw_boundry(1);

       if(reject==0 && t1<t2)
       {
           X1=round(X0+t2*dx);
           Y1=round(Y0+t2*dy);
           X0=round(X0+t1*dx);
           Y0=round(Y0+t1*dy);
           draw_line(1);

       }


   }

-----------------------------------

4. Program to implement the Cohen-Sutherland line-clipping algorithm. Make provision to specify the input line, window for clipping and viewport for displaying the clipped image.

#include<stdio.h>
#include<stdlib.h>
#include<GL/glut.h>
const int INSIDE=0, LEFT=1, RIGHT=2, BOTTOM=4, TOP=8;
int x0,y0,x1,y1,xmin,ymin,xmax,ymax;
void init();
void display();
void draw_line(int type);
void draw_boundry(int type);
void cohen();
int compute(int x, int y);

int main(int argc, char ** argv)
{
    printf("Enter window coordinates:");
    printf("\nxmin:");
    scanf("%d",&xmin);

    printf("ymin:");
    scanf("%d",&ymin);

    printf("xmax:");
    scanf("%d",&xmax);

    printf("ymax:");
    scanf("%d",&ymax);

    printf("enter line coordinates:");
    printf("\nx0:");
    scanf("%d",&x0);

    printf("y0:");
    scanf("%d",&y0);

    printf("x1:");
    scanf("%d",&x1);

    printf("y1:");
    scanf("%d",&y1);

    glutInit(&argc, argv);
    glutInitWindowSize(1000,1000);
    glutCreateWindow("COHEN SUTHERLAND");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}

void init()
{
    glClearColor(1,1,1,1);
    glClear(GL_COLOR_BUFFER_BIT);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0,1000,0,1000);
}
void display()
{   glClear(GL_COLOR_BUFFER_BIT);
    draw_boundry(0);
    draw_line(0);
    cohen();
    glFlush();
}
void draw_boundry(int type)
{    glColor3f(0,0,1);
    if(type==0)
    {
    glBegin(GL_LINE_LOOP);
    glVertex2f(xmin,ymin);
    glVertex2f(xmax,ymin);
    glVertex2f(xmax,ymax);
    glVertex2f(xmin,ymax);
    glEnd();
    }
    else{
       glBegin(GL_LINE_LOOP);
    glVertex2f(xmin*4,ymin*4);
    glVertex2f(xmax*4,ymin*4);
    glVertex2f(xmax*4,ymax*4);
    glVertex2f(xmin*4,ymax*4);
    glEnd();


    }


}
void draw_line(int type)
{
   glColor3f(1,0,0);
   if(type==0)
   {
       glBegin(GL_LINES);
       glVertex2f(x0,y0);
       glVertex2f(x1,y1);
       glEnd();
   }
   else{
        glBegin(GL_LINES);
       glVertex2f(x0*4,y0*4);
       glVertex2f(x1*4,y1*4);
       glEnd();



   }



}
void cohen()
{
    int code0,code1,accept=0;
    code0=compute(x0,y0);
    code1=compute(x1,y1);
    while(1)
    {
        if(!(code0 | code1))
        {
            accept=1;
            break;

        }
        else if(code0 & code1)
        {
            break;

        }
        else{
            int code;
            double slope,x,y;
            code=code0?code0:code1;
            slope=(y1-y0)/(double)(x1-x0);

            if(code & LEFT)
            {
                x=xmin;
                y=slope*(xmin-x0)+y0;

            }
            else if( code & RIGHT)
            { x=xmax;
               y=slope*(xmax-x0)+y0;
            }
            else if(code & BOTTOM)
            {
                x=(ymin-y0)/slope+x0;
                y=ymin;

            }
            else if(code & TOP)
            {
                x=(ymax-y0)/slope+x0;
                y=ymax;

            }
            if(code==code0)
            {
                x0=x;
                y0=y;
                code0=compute(x0,y0);

            }
            else{
                x1=x;
                y1=y;
                code1=compute(x1,y1);

            }

        }
    }

    draw_boundry(1);
    if(accept)
        draw_line(1);

}
int compute(int x, int y)
{  int code=INSIDE;
    if(x<xmin)
        code |=LEFT;
    if(x>xmax)
        code |=RIGHT;
    if(y<ymin)
        code |=BOTTOM;
    if(y>ymax)
        code |=TOP;

    return code;
}

-------------------------------------

5. Program to fill any given polygon using scan-line area filling algorithm. vertices for the polygon should be specified by the user.
#include<stdio.h>
#include<stdlib.h>
#include<GL/glut.h>
int v;
int x[20],y[20];

void init();
void display();
void scanlinefill();
void edgedetect(int x1, int y1, int x2, int y2, int *LE, int *RE);
void drawpixel(int x, int y);

int main(int argc, char** argv[])
{   int i;
    printf("Enter the no of vertices:");
    scanf("%d",&v);
    for(i=0;i<v;i++){
    printf("x%d:",i);
    scanf("%d",&x[i]);

     printf("y%d:",i);
    scanf("%d",&y[i]);
    }

    glutInit(&argc, argv);
    glutInitWindowSize(500,500);
    glutCreateWindow("SCAN LINE FILL ALGORITHM");

    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}

void init()
{
    glClearColor(1,1,1,1);
    glClear(GL_COLOR_BUFFER_BIT);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0,500,0,500);
}
void display()
{   int i;
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0,0,1);
    glBegin(GL_LINE_LOOP);
    for(i=0;i<v;i++)
        glVertex2f(x[i],y[i]);
    glEnd();
    glFlush();
    scanlinefill();
}
void scanlinefill()
{
    int LE[500],RE[500];
    int i,j;
    for(i=0;i<500;i++)
    {
        LE[i]=500;
        RE[i]=0;
    }
    for(i=0;i<v;i++)
        edgedetect(x[i],y[i],x[(i+1)%v],y[(i+1)%v],LE,RE);
    for(i=0;i<500;i++)
    {
        if(LE[i]<=RE[i])
        {
            for(j=LE[i];j<=RE[i];j++)
            {
                drawpixel(j,i);
                glFlush();

            }

        }

    }


}
void edgedetect(int x1, int y1, int x2, int y2, int *LE, int *RE)
{
    int temp,i;
    double slopeinverse,x;
    if(y2<y1)
    {
      temp=y1;
      y1=y2;
      y2=temp;

       temp=x1;
      x1=x2;
      x2=temp;



    }
    if(y1!=y2)
    {
        slopeinverse=(x2-x1)/(double)(y2-y1);

    }
    else
        slopeinverse=x2-x1;

    x=x1;
    for(i=y1;i<=y2;i++)
    {
        if(x<LE[i])
            LE[i]=x;
        if(x>RE[i])
            RE[i]=x;
        x+=slopeinverse;

}

}

void drawpixel(int x, int y)
{
    glColor3f(0,0,1);
    //glPointSize(1);
    glBegin(GL_POINTS);
    glVertex2f(x,y);
    glEnd();
}

--------------------------------------------

6. Program to recursively subdivide a triangle to form 2D Sierpinski gasket. The number of recursive steps is to be specified by the user

#include <windows.h>
#include <GL/glut.h>
#include <stdio.h>
int n;

void init()
{
      glClearColor(1.0, 1.0, 1.0, 1.0);
      glClear(GL_COLOR_BUFFER_BIT);
      glMatrixMode(GL_PROJECTION);
      gluOrtho2D(0, 10, 0, 10);
}

void triangle(float *a,float *b, float *c)
{
     glVertex2f(a[0],a[1]);
     glVertex2f(b[0],b[1]);
     glVertex2f(c[0],c[1]);
}

void draw_triangle(float *a,float *b,float *c , int k)
{
	float ab[2],ac[2],bc[2];
	int i;
	if(k>0)
	{
	  for(i=0;i<2;i++)
		ab[i]=(a[i]+b[i])/2;
	  for(i=0;i<2;i++)
		bc[i]=(b[i]+c[i])/2;
	  for(i=0;i<2;i++)
		ac[i]=(a[i]+c[i])/2;

	 draw_triangle(a,ab,ac,k-1);
	 draw_triangle(b,bc,ab,k-1);
	 draw_triangle(c,ac,bc,k-1);
	}
	else
	{
          triangle(a,b,c);
	}
}

void display()
{
    float a[2]={1,1};
    float b[2]={6,1};
    float c[2]={3.5,5};

    glBegin(GL_TRIANGLES);
    glColor3f(0,0,0);
    draw_triangle(a,b,c,n);
    glEnd();
    glFlush();
}
int main(int argc, char** argv)

{
    printf("enter n value");
    scanf("%d",&n);
    glutInit(&argc,argv);
    glutInitWindowSize(500,500);
    glutCreateWindow("Sierpinski Gasket");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
------------------------------

7. Program to display a set of values {f(i, j)} as a rectangular mesh. Number of rows and columns for the mesh generation must be taken from the user.

#include<windows.h>
#include<stdlib.h>
#include<GL/glut.h>
#define maxx 20
#define maxy 30
#define dx 10
#define dy 15
GLfloat x[maxx]={0.0},y[maxy]={0.0};
GLfloat x0=50,y0=50;
GLint i,j;
void init()
{
	glClearColor(1.0,1.0,1.0,1.0);
	glColor3f(1.0,0.0,0.0);
	glPointSize(5.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0,499.0,0.0,499.0);
	glutPostRedisplay();
}
void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(0.0,0.0,1.0);
	for(i=0;i<maxx;i++)
		x[i]=x0+i*dx;
	for(j=0;j<maxy;j++)
		y[j]=y0+j*dy;
	glColor3f(0.0,0.0,1.0);
	for(i=0;i<maxx-1;i++)  // Filling mesh from bottom to top and left to right
		for(j=0;j<maxy-1;j++)
		{
			glColor3f(0.0,0.0,1.0);
			glBegin(GL_LINE_LOOP);
			glVertex2f(x[i],y[j]);
			glVertex2f(x[i],y[j+1]);
			glVertex2f(x[i+1],y[j+1]);
			glVertex2f(x[i+1],y[j]);
			glEnd();
			glFlush();
		}
		glFlush();
		
}
int main(int argc,char **argv)
{
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
	glutInitWindowSize(500,400);
	glutInitWindowPosition(0,0);
	glutCreateWindow("Rectangular Mesh");
	glutDisplayFunc(display);
	init();
	glutMainLoop();
}


-----------------------------------------------

8. Program to create a random figure and rotate it about a given fixed point using transformation matrices. Make provision for the user to enter pivot point for the rotation.
#include<windows.h>
#include<stdio.h>
#include<math.h>
#include<GL/glut.h>
GLfloat house[2][9]={{100.0,100.0,175.0,250.0,250.0,150.0,150.0,200.0,200.0},        {100.0,300.0,400.0,300.0,100.0,100.0,150.0,150.0,100.0}};
GLfloat theta;
GLfloat h=100.0;
GLfloat k=100.0;
void drawhouse()
{
    glColor3f(1.0,0.0,0.0);
    glBegin(GL_LINE_LOOP);
    glVertex2f(house[0][0],house[1][0]);
    glVertex2f(house[0][1],house[1][1]);
    glVertex2f(house[0][3],house[1][3]);
    glVertex2f(house[0][4],house[1][4]);
    glEnd();
    glColor3f(1.0,0.0,1.0);
    glBegin(GL_LINE_LOOP);
    glVertex2f(house[0][5],house[1][5]);
    glVertex2f(house[0][6],house[1][6]);
    glVertex2f(house[0][7],house[1][7]);
    glVertex2f(house[0][8],house[1][8]);
    glEnd();
    glColor3f(1.0,0.0,0.0);
    glBegin(GL_LINE_LOOP);
    glVertex2f(house[0][1],house[1][1]);
    glVertex2f(house[0][2],house[1][2]);
    glVertex2f(house[0][3],house[1][3]);
    glEnd();
}
void display()
{
    int i;
    GLfloat m[16],p,q;


    p=-h*(cos(theta)-1)+k*(sin(theta));
    q=-k*(cos(theta)-1)-h*(sin(theta));
    for(i=0;i<15;i++)
        m[i]=0.0;
    m[0]=cos(theta);
    m[1]=sin(theta);
    m[4]=-sin(theta);
    m[5]=cos(theta);
    m[12]=p;
    m[13]=q;
    m[10]=1;
    m[15]=1;
    glMatrixMode(GL_MODELVIEW);
    glClear(GL_COLOR_BUFFER_BIT);
    drawhouse();
    glPushMatrix();
    glMultMatrixf(m);
    drawhouse();
    glPopMatrix();
    glFlush();
}
void myinit()
{
    glClearColor(1.0,1.0,1.0,1.0);
    glColor3f(1.0,1.0,0.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0,499.0,0.0,499.0);
    glMatrixMode(GL_MODELVIEW);
}
int main(int argc,char **argv)
{
    printf("enter the rotation angle\n");
    scanf("%f",&theta);
    theta=theta*3.141/180;
    glutInit(&argc,argv);
    glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
    glutInitWindowSize(500,500);
    glutInitWindowPosition(0,0);
    glutCreateWindow("rotated house");
    glutDisplayFunc(display);
    myinit();
    glutMainLoop();
    return 0;
}

------------------------------------

9.Program to create a random object and to implement the suggested mouse and keyboard interactions through OpenGL function.

#include<GL/glut.h>
#include<stdio.h>
#include<stdlib.h>

void init();
void display();
void mykey(unsigned char key, int x, int y);
void mouse(int button, int status, int x, int y);
void draw_point(int x, int y);
void draw_line(int x, int y);
void draw_square(int x, int y);
void draw_triangle(int x, int y);
void draw_pentagon(int x, int y);

int main(int argc, char ** argv[])
{
    glutInit(&argc,argv);
    glutInitWindowSize(1000,1000);
    glutCreateWindow("clicking");
    init();
    glutDisplayFunc(display);
    glutMouseFunc(mouse);
    glutKeyboardFunc(mykey);
    glutMainLoop();
    return 0;
}

void init()
{   glClearColor(1,1,1,1);
    glClear(GL_COLOR_BUFFER_BIT);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0,500,500,0);
}
void display()
{

    glFlush();

}
void mouse(int button, int status, int x, int y)
{
    if(button==GLUT_LEFT_BUTTON && status==GLUT_DOWN)
    {
        draw_point(x,y);

    }
    if(button==GLUT_RIGHT_BUTTON && status==GLUT_DOWN)
    {
        draw_line(x,y);

    }

}
void mykey(unsigned char key, int x, int y)
{
    if(key=='t' || key=='T')
        draw_triangle(x,y);
    if(key=='p' || key=='P')
        draw_pentagon(x,y);
     if(key=='s' || key=='S')
        draw_square(x,y);

}
void draw_point(int x, int y)
{    glColor3f(0,0,1);
    glPointSize(10);
    glBegin(GL_POINTS);
    glVertex2f(x,y);
    glEnd();
    glFlush();

}

void draw_line(int x, int y)
{    glColor3f(1,0,0);
     glLineWidth(10);
    glBegin(GL_LINES);
    glVertex2f(x,y);
    glVertex2f(x+100,y+100);
    glEnd();
    glFlush();

}
void draw_square(int x, int y)
{    glColor3f(1,0,1);

    glBegin(GL_POLYGON);
    glVertex2f(x,y);
    glVertex2f(x+200,y);
    glVertex2f(x+200,y+200);
    glVertex2f(x,y+200);
    glEnd();
    glFlush();

}

void draw_pentagon(int x, int y)
{    glColor3f(0,1,1);

    glBegin(GL_POLYGON);
    glVertex2f(x,y);
    glVertex2f(x+200,y);
    glVertex2f(x+200,y+200);
    glVertex2f(x+100,x+300);
    glVertex2f(x,y+200);
    glEnd();
    glFlush();

}

void draw_triangle(int x, int y)
{    glColor3f(0,1,0);

    glBegin(GL_TRIANGLES);
    glVertex2f(x,y);
    glVertex2f(x+200,y);
    glVertex2f(x+100,y+200);
    glEnd();
    glFlush();

}


-------------------------------------

10. Program to draw a color cube and spin it using OpenGL transformation matrices along x, y and z axes.

#include<stdlib.h>
#include<GL/glut.h>
#include<stdio.h>
GLfloat vertices[][3]={{-1.0,-1.0,-1.0},{1.0,-1.0,-1.0},{1.0,1.0,-1.0},
            {-1.0,1.0,-1.0},{-1.0,-1.0,1.0},{1.0,-1.0,1.0},{1.0,1.0,1.0},{-1.0,1.0,1.0}};
GLfloat normals[][3]={{-1.0,-1.0,-1.0},{1.0,-1.0,1.0},{1.0,1.0,-1.0},
        {-1.0,1.0,-1.0},{-1.0,-1.0,1.0},{1.0,-1.0,1.0},{1.0,1.0,1.0},{-1.0,1.0,1.0}};
GLfloat colors[][3]={{0.0,0.0,0.0},{1.0,0.0,0.0},{1.0,1.0,0.0},{0.0,1.0,0.0},
                            {0.0,0.0,1.0},{1.0,0.0,1.0},{1.0,1.0,1.0},{0.0,1.0,1.0}};

void polygon(int a,int b,int c,int d)
{
	glBegin(GL_POLYGON);
	glColor3fv(colors[a]);
glNormal3fv(normals[a]);
	glVertex3fv(vertices[a]);
	glColor3fv(colors[b]);
	glNormal3fv(normals[b]);
	glVertex3fv(vertices[b]);
	glColor3fv(colors[c]);
	glNormal3fv(normals[c]);
	glVertex3fv(vertices[c]);
	glColor3fv(colors[d]);
	glNormal3fv(normals[d]);
	glVertex3fv(vertices[d]);
	glEnd();
}
void colorcube(void)
{
	polygon(0,3,2,1);
	polygon(2,3,7,6);
	polygon(0,4,7,3);
	polygon(1,2,7,6);
	polygon(4,5,6,7);
	polygon(0,1,5,4);
}
static GLfloat theta[]={0.0,0.0,0.0};
static GLint axis=2;
void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();
	glRotatef(theta[0],1.0,0.0,0.0);
	glRotatef(theta[1],0.0,1.0,0.0);
	glRotatef(theta[2],0.0,0.0,1.0);
	colorcube();
	glFlush();
	glutSwapBuffers();
}
void spinCube()
{
	theta[axis]+=1.0;
	if(theta[axis]>360.0) theta[axis]-=360.0;
	glutPostRedisplay();
}
void mouse(int btn,int state,int x,int y)
{
	if(btn==GLUT_LEFT_BUTTON&&state==GLUT_DOWN)axis=0;
	if(btn==GLUT_MIDDLE_BUTTON&&state==GLUT_DOWN)axis=1;
	if(btn==GLUT_RIGHT_BUTTON&&state==GLUT_DOWN)axis=2;
}
void myReshape(int w,int h)
{
	glViewport(0,0,w,h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if(w<=h)
		glOrtho(-2.0,2.0,-2.0*(GLfloat)h/(GLfloat)w,2.0*(GLfloat)h/(GLfloat)w,-10.0,10.0);
	else
		glOrtho(-2.0*(GLfloat)w/(GLfloat)h,2.0*(GLfloat)w/(GLfloat)h,-2.0,2.0,-10.0,10.0);
	glMatrixMode(GL_MODELVIEW);

}
int main(int argc,char **argv)
{
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB|GLUT_DEPTH);
	glutInitWindowSize(500,500);
	glutCreateWindow("Rotating a color cube");
	glutReshapeFunc(myReshape);
	glutDisplayFunc(display);
	glutIdleFunc(spinCube);
	glutMouseFunc(mouse);
	glEnable(GL_DEPTH_TEST);
	glutMainLoop();
}
-----------------------------------------------

